WEBVTT

1
00:00:02.802 --> 00:00:03.122
Welcome to the chapter "Starter Kit":

2
00:00:03.122 --> 00:00:10.722
Building Virtualized Development Environments using the tools Vagrant and Puppet.

3
00:00:10.972 --> 00:00:16.002
The learning objectives of this chapter are:

4
00:00:16.252 --> 00:00:30.002
Using ARSnova as an example, we want to introduce you to the complexities and management of modern web projects.

5
00:00:30.252 --> 00:00:41.202
We will use ARSnova to explore and analyze the build process of such projects.

6
00:00:41.452 --> 00:00:50.002
The ARSnova app is a good example of a client-server based web application:

7
00:00:50.252 --> 00:01:08.002
It features a backend realized with Java Enterprise technology, and a REST API.

8
00:01:08.732 --> 00:01:12.682
Based on this backend, several different HTML clients do their job.

9
00:01:12.932 --> 00:01:16.432
During the units in this chapter you will experience how tedious it is to build a running system manually from the individual components.

10
00:01:35.522 --> 00:01:45.762
To do this, we need virtual development environments.

11
00:01:46.012 --> 00:01:56.722
However, we don't want to rebuild and provision these Virtual Machines (VMs) each time.

12
00:01:56.972 --> 00:02:16.922
Instead, we want to create a configuration plan and use a software called Vagrant to create VMs based on Oracle's VirtualBox automatically.

13
00:02:17.172 --> 00:02:32.162
It is important to understand that Development Environments need to be as close as possible to the production environment,

14
00:02:32.412 --> 00:02:47.242
to avoid "migration hell" when migrating the individual components of different developers from their desktop environments into the production environment.

15
00:02:47.492 --> 00:02:56.522
We need tools that automate system configuration.

16
00:02:56.772 --> 00:03:16.162
At the end of this - difficult - chapter you will have the same development environment that is used for arsnova.eu.

17
00:03:16.412 --> 00:03:32.242
You will have a Debian server OS with all the components of the backend, and the client software, locally on your machine.

18
00:03:32.492 --> 00:03:46.562
Based on this environment, you will be prepared to explore the tools for performance tests, GUI tests, build automation etc. in the following chapters.

19
00:03:46.812 --> 00:04:00.962
You will see that you can develop your applications with the tools of your choice on your host using the full performance capacities of your system

20
00:04:01.212 --> 00:04:08.922
and that your development will be synchronized into the virtual machine of your production environment automatically.

21
00:04:09.172 --> 00:04:19.682
You will then be able to test against this production environment and run the quality assessment processes.

22
00:04:19.932 --> 00:04:55.082
At the end of the course, during the Scrum project, you will get a feel of what is called the DevOps rhythm: continuously coding, building, testing and deploying software.

23
00:04:55.332 --> 00:05:20.882
All this happens in micro-cycles: editing a bit of code, running the quality "machinery" and checking the results in a pre-production environment.

24
00:05:21.132 --> 00:05:24.632
Absolutely amazing.

25
00:05:24.882 --> 00:05:31.362
At the end of the day we can deliver our daily work to our customers.

26
00:05:31.612 --> 00:05:39.882
As you already know, we will use ARSnova as our teaching vehicle.

27
00:05:40.132 --> 00:05:46.002
Let's have a look at the ARSnova project as seen from high above:

28
00:05:46.252 --> 00:05:54.082
There is the mobile client which you have already used:

29
00:05:54.332 --> 00:06:10.202
The mobile HTML5 client was developed using the Sencha Touch Application Framework.

30
00:06:10.452 --> 00:06:24.162
The Sencha Touch build tools - Sencha Cmd - are used to produce the production version by minifying and optimizing the development version.

31
00:06:24.412 --> 00:06:28.682
At the backend, there is a REST server.

32
00:06:28.932 --> 00:06:35.122
It is built using the Java EE Spring framework,

33
00:06:35.372 --> 00:06:41.802
Apache components like Apache Tomcat,

34
00:06:42.052 --> 00:06:45.682
and for static pages the Apache HTTP server.

35
00:06:45.932 --> 00:07:03.842
For real time operations, we use the WebSockets protocol and therefore we also need a Socket.IO server.

36
00:07:04.092 --> 00:07:07.592


37
00:07:04.092 --> 00:07:12.002
For a database, we use a NoSQL database, namely Apache CouchDB.

38
00:07:12.252 --> 00:07:27.282
The complete backend system is built using Apache Maven and deployed using the Jenkins build environment.

39
00:07:27.532 --> 00:07:44.842
There are two ways of building, installing and running ARSnova in a Virtual Machine:

40
00:07:45.092 --> 00:07:53.122
The hard way as introduced in WE II, doing each step manually.

41
00:07:53.372 --> 00:07:56.872
Since we want to develop apps and not work as main operations engineers,

42
00:07:57.122 --> 00:08:21.442
we don't really need to know what happens in the background.

43
00:08:21.692 --> 00:08:34.362
Therefore, of we could reduce the whole process of creating development and production environments,

44
00:08:34.612 --> 00:08:38.922
and building the software from its components, to a single command, that would be truly amazing.

45
00:08:39.172 --> 00:08:50.002
Let's get to the first homework assignment that will be the foundation for all other assignments:

46
00:08:50.252 --> 00:09:07.682
It is your task to get the ARSnova project up and running in a development environment on your computer using the magic command 
$ vagrant up.

47
00:09:07.932 --> 00:09:21.322
Secondly, you are asked to get to know ARSnova from a user's perspective by studying the manual step by step.

48
00:09:21.572 --> 00:09:33.602
To prove that you were successful and to enhance the learning effect, you are supposed to create eight questions using your new ARSnova installation.

49
00:09:33.852 --> 00:09:51.762
Each question should use a different type of question, i.e. multiple choice, single choice, yes/no, free text, rating, grade, flash card and grid.

50
00:09:52.012 --> 00:09:58.682
Content-wise, your questions should center on the first chapter, i.e. Build Automation:

51
00:09:58.932 --> 00:10:21.682
- Vagrant: what is it and how to build virtual environments with a few lines of code
- Running automated configuration scripts with Puppet

52
00:10:21.932 --> 00:10:37.722
For us as teachers this helps to get feedback if the materials we provided on Vagrant and Puppet were sufficient to get you going.

53
00:10:37.972 --> 00:10:44.922
Please try to create exam-like questions and the corresponding answer options.

54
00:10:45.172 --> 00:11:13.842
With the help of couchdb-python, you are asked to submit a dump (backup) of your local CouchDB containing the eight questions to the iversity platform for peer review,

55
00:11:14.092 --> 00:11:18.082
The deadline for this submission is June 15th, 2014.

56
00:11:18.332 --> 00:11:40.362
You and your peers will then have to review a minimum of 7 submissions (each containing 8 questions and the corresponding answers),

57
00:11:40.612 --> 00:11:47.642
and evaluate the quality of those questions and answers.

58
00:11:47.892 --> 00:11:55.682
Here is a short overview of the units of this chapter:

59
00:11:55.932 --> 00:12:15.642
1. Optional crash courses and cheat sheets in case you are not familiar with Unix/Linux commands or our version management system Git.

60
00:12:15.892 --> 00:12:23.282
2. Use cases of ARSnova and studying the ARSnova manual

61
00:12:23.532 --> 00:12:31.562
3. Presentation of the system architecture and infrastructure of ARSnova

62
00:12:31.812 --> 00:12:50.922
Please go through each of the sequences in detail and try to get a feeling for the complexity, the challenges and the requirements of maintaining of such a project.

63
00:12:51.172 --> 00:13:10.882
4. Demonstration of how to install ARSnova the hard way (you don't have to follow that).

64
00:13:11.132 --> 00:13:21.362
5. Introduction to the tools of this chapter: Vagrant and Puppet.

65
00:13:21.612 --> 00:13:34.802
Easy creation of  Oracle Virtual Machines and system configuration scripts.

66
00:13:35.052 --> 00:13:38.552
6. Installing ARSnova the soft way: Creating one or more Oracle Virtual Box(es) with the single command $ vagrant up.

67
00:13:38.802 --> 00:14:03.362
i.e. create development and production environments that allow you to use shared folders for data exchange between your host and the VMs.

68
00:14:03.612 --> 00:14:24.322
This allows you to develop your software using all the tools you are used to and without sacrificing performance.

69
00:14:24.572 --> 00:14:42.762
Then, the homework assignment #0 as fundamental prerequisite for all the following chapters.

70
00:14:43.012 --> 00:14:57.042
Finally, an ARSnova survey on your progress.

71
00:14:57.292 --> 00:15:00.792
Good luck with the Starter Kit.

